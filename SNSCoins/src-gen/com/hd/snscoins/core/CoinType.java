package com.hd.snscoins.core;

import java.util.List;
import com.hd.snscoins.core.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table type.
 */
public class CoinType {

    private Long id;
    private String type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CoinTypeDao myDao;

    private List<CoinSubType> subTypeList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CoinType() {
    }

    public CoinType(Long id) {
        this.id = id;
    }

    public CoinType(Long id, String type) {
        this.id = id;
        this.type = type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCoinTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CoinSubType> getSubTypeList() {
        if (subTypeList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoinSubTypeDao targetDao = daoSession.getCoinSubTypeDao();
            List<CoinSubType> subTypeListNew = targetDao._queryCoinType_SubTypeList(id);
            synchronized (this) {
                if(subTypeList == null) {
                    subTypeList = subTypeListNew;
                }
            }
        }
        return subTypeList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubTypeList() {
        subTypeList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean equals(Object object) {
        if (this == object)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;

        CoinType other = (CoinType) object;
        if (this.getId().floatValue() != other.getId().floatValue()) {
            return false;
        }
        return true;
    }
    // KEEP METHODS END

}
