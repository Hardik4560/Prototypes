package com.hd.snscoins.core;

import com.hd.snscoins.core.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table mint.
 */
public class Mint {

    private Long id;
    private String title;
    private Integer rare;
    private long id_year;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MintDao myDao;

    private Year year;
    private Long year__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Mint() {
    }

    public Mint(Long id) {
        this.id = id;
    }

    public Mint(Long id, String title, Integer rare, long id_year) {
        this.id = id;
        this.title = title;
        this.rare = rare;
        this.id_year = id_year;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMintDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getRare() {
        return rare;
    }

    public void setRare(Integer rare) {
        this.rare = rare;
    }

    public long getId_year() {
        return id_year;
    }

    public void setId_year(long id_year) {
        this.id_year = id_year;
    }

    /** To-one relationship, resolved on first access. */
    public Year getYear() {
        long __key = this.id_year;
        if (year__resolvedKey == null || !year__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            YearDao targetDao = daoSession.getYearDao();
            Year yearNew = targetDao.load(__key);
            synchronized (this) {
                year = yearNew;
            	year__resolvedKey = __key;
            }
        }
        return year;
    }

    public void setYear(Year year) {
        if (year == null) {
            throw new DaoException("To-one property 'id_year' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.year = year;
            id_year = year.getId();
            year__resolvedKey = id_year;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
