package com.hd.snscoins.core;

import com.hd.snscoins.core.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table news.
 */
public class News {

    private Long id;
    /** Not-null value. */
    private String title;
    private String date;
    private String time;
    private String details;
    private String img_path;
    private long id_category;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NewsDao myDao;

    private NewsCategory newsCategory;
    private Long newsCategory__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public News() {
    }

    public News(Long id) {
        this.id = id;
    }

    public News(Long id, String title, String date, String time, String details, String img_path, long id_category) {
        this.id = id;
        this.title = title;
        this.date = date;
        this.time = time;
        this.details = details;
        this.img_path = img_path;
        this.id_category = id_category;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNewsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public String getImg_path() {
        return img_path;
    }

    public void setImg_path(String img_path) {
        this.img_path = img_path;
    }

    public long getId_category() {
        return id_category;
    }

    public void setId_category(long id_category) {
        this.id_category = id_category;
    }

    /** To-one relationship, resolved on first access. */
    public NewsCategory getNewsCategory() {
        long __key = this.id_category;
        if (newsCategory__resolvedKey == null || !newsCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NewsCategoryDao targetDao = daoSession.getNewsCategoryDao();
            NewsCategory newsCategoryNew = targetDao.load(__key);
            synchronized (this) {
                newsCategory = newsCategoryNew;
            	newsCategory__resolvedKey = __key;
            }
        }
        return newsCategory;
    }

    public void setNewsCategory(NewsCategory newsCategory) {
        if (newsCategory == null) {
            throw new DaoException("To-one property 'id_category' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.newsCategory = newsCategory;
            id_category = newsCategory.getId();
            newsCategory__resolvedKey = id_category;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
