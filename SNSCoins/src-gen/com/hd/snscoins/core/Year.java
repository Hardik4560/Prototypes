package com.hd.snscoins.core;

import java.util.List;
import com.hd.snscoins.core.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table year.
 */
public class Year {

    private Long id;
    private String title;
    private long id_coin;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient YearDao myDao;

    private Coin coin;
    private Long coin__resolvedKey;

    private List<Mint> mintList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Year() {
    }

    public Year(Long id) {
        this.id = id;
    }

    public Year(Long id, String title, long id_coin) {
        this.id = id;
        this.title = title;
        this.id_coin = id_coin;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getYearDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public long getId_coin() {
        return id_coin;
    }

    public void setId_coin(long id_coin) {
        this.id_coin = id_coin;
    }

    /** To-one relationship, resolved on first access. */
    public Coin getCoin() {
        long __key = this.id_coin;
        if (coin__resolvedKey == null || !coin__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoinDao targetDao = daoSession.getCoinDao();
            Coin coinNew = targetDao.load(__key);
            synchronized (this) {
                coin = coinNew;
            	coin__resolvedKey = __key;
            }
        }
        return coin;
    }

    public void setCoin(Coin coin) {
        if (coin == null) {
            throw new DaoException("To-one property 'id_coin' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.coin = coin;
            id_coin = coin.getId();
            coin__resolvedKey = id_coin;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Mint> getMintList() {
        if (mintList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MintDao targetDao = daoSession.getMintDao();
            List<Mint> mintListNew = targetDao._queryYear_MintList(id);
            synchronized (this) {
                if(mintList == null) {
                    mintList = mintListNew;
                }
            }
        }
        return mintList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMintList() {
        mintList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
