package com.hd.snscoins.core;

import java.util.List;
import com.hd.snscoins.core.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table product.
 */
public class Coin {

    private Long id;
    /** Not-null value. */
    private String name;
    private String icon_location;
    private long id_sub_type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CoinDao myDao;

    private CoinSubType coinSubType;
    private Long coinSubType__resolvedKey;

    private List<Year> yearList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Coin() {
    }

    public Coin(Long id) {
        this.id = id;
    }

    public Coin(Long id, String name, String icon_location, long id_sub_type) {
        this.id = id;
        this.name = name;
        this.icon_location = icon_location;
        this.id_sub_type = id_sub_type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCoinDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getIcon_location() {
        return icon_location;
    }

    public void setIcon_location(String icon_location) {
        this.icon_location = icon_location;
    }

    public long getId_sub_type() {
        return id_sub_type;
    }

    public void setId_sub_type(long id_sub_type) {
        this.id_sub_type = id_sub_type;
    }

    /** To-one relationship, resolved on first access. */
    public CoinSubType getCoinSubType() {
        long __key = this.id_sub_type;
        if (coinSubType__resolvedKey == null || !coinSubType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoinSubTypeDao targetDao = daoSession.getCoinSubTypeDao();
            CoinSubType coinSubTypeNew = targetDao.load(__key);
            synchronized (this) {
                coinSubType = coinSubTypeNew;
            	coinSubType__resolvedKey = __key;
            }
        }
        return coinSubType;
    }

    public void setCoinSubType(CoinSubType coinSubType) {
        if (coinSubType == null) {
            throw new DaoException("To-one property 'id_sub_type' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.coinSubType = coinSubType;
            id_sub_type = coinSubType.getId();
            coinSubType__resolvedKey = id_sub_type;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Year> getYearList() {
        if (yearList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            YearDao targetDao = daoSession.getYearDao();
            List<Year> yearListNew = targetDao._queryCoin_YearList(id);
            synchronized (this) {
                if(yearList == null) {
                    yearList = yearListNew;
                }
            }
        }
        return yearList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetYearList() {
        yearList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean equals(Object object) {
        if (this == object)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;

        CoinType other = (CoinType) object;
        if (this.getId().floatValue() != other.getId().floatValue()) {
            return false;
        }
        return true;
    }
    // KEEP METHODS END

}
