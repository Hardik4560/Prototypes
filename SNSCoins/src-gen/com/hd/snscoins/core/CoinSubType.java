package com.hd.snscoins.core;

import java.util.List;
import com.hd.snscoins.core.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table sub_type.
 */
public class CoinSubType implements java.io.Serializable {

    private Long id;
    private String type;
    private long id_type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CoinSubTypeDao myDao;

    private CoinType coinType;
    private Long coinType__resolvedKey;

    private List<Coin> coinList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CoinSubType() {
    }

    public CoinSubType(Long id) {
        this.id = id;
    }

    public CoinSubType(Long id, String type, long id_type) {
        this.id = id;
        this.type = type;
        this.id_type = id_type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCoinSubTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public long getId_type() {
        return id_type;
    }

    public void setId_type(long id_type) {
        this.id_type = id_type;
    }

    /** To-one relationship, resolved on first access. */
    public CoinType getCoinType() {
        long __key = this.id_type;
        if (coinType__resolvedKey == null || !coinType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoinTypeDao targetDao = daoSession.getCoinTypeDao();
            CoinType coinTypeNew = targetDao.load(__key);
            synchronized (this) {
                coinType = coinTypeNew;
            	coinType__resolvedKey = __key;
            }
        }
        return coinType;
    }

    public void setCoinType(CoinType coinType) {
        if (coinType == null) {
            throw new DaoException("To-one property 'id_type' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.coinType = coinType;
            id_type = coinType.getId();
            coinType__resolvedKey = id_type;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Coin> getCoinList() {
        if (coinList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoinDao targetDao = daoSession.getCoinDao();
            List<Coin> coinListNew = targetDao._queryCoinSubType_CoinList(id);
            synchronized (this) {
                if(coinList == null) {
                    coinList = coinListNew;
                }
            }
        }
        return coinList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCoinList() {
        coinList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public String toString() {
        return type;
    }
    // KEEP METHODS END

}
